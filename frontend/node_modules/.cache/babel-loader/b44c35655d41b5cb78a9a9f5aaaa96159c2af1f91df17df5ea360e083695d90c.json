{"ast":null,"code":"import { csrfFetch } from \"./csrf\";\nconst LOAD = 'spots/LOAD';\nconst CREATE = 'spots/CREATE';\nconst DELETE = 'spots/DELETE';\nconst GET_ONE = 'spots/GET_ONE';\nconst CREATE_IMG = 'spots/image/CREATE';\nconst load = spots => ({\n  type: LOAD,\n  spots\n});\nconst create = spot => ({\n  type: CREATE,\n  spot\n});\nconst createImage = image => ({\n  type: CREATE,\n  image\n});\nconst getOne = spot => ({\n  type: GET_ONE,\n  spot\n});\nconst remove = spotId => ({\n  type: DELETE,\n  spotId\n});\nexport const getSpots = () => async dispatch => {\n  const response = await csrfFetch('/api/spots');\n  if (response.ok) {\n    const {\n      Spots\n    } = await response.json();\n    dispatch(load(Spots));\n    return Spots;\n  }\n  return response;\n};\nexport const postSpot = payload => async dispatch => {\n  console.log('hello from postSpot');\n  let spot;\n  const {\n    spotPayload\n  } = payload;\n  console.log('spotPayload: ', spotPayload);\n  const spotResponse = await csrfFetch('/api/spots', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(spotPayload)\n  }).then(async e => {\n    return await e.json();\n  });\n  spot = await spotResponse.json();\n  if (spotResponse.ok) {\n    console.log('spot: ', spot);\n    const {\n      imagePayload\n    } = payload;\n    console.log('imagePayload: ', imagePayload);\n    const imageResponse = await csrfFetch(`/api/spots/${spot.id}/images`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(imagePayload)\n    });\n    const image = await imageResponse.json();\n    console.log('imageResponse: ', image);\n    if (imageResponse.ok) {\n      console.log('image: ', image);\n      spot.previewImage = image.url;\n      await dispatch(create(spot));\n    }\n  }\n  console.log('thunk spot final form: ', spot);\n  return spotResponse;\n};\nexport const putSpot = payload => async dispatch => {\n  console.log('payload: ', payload);\n  const response = await csrfFetch(`/api/spots/${payload.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  });\n  if (response.ok) {\n    const spot = await response.json();\n    dispatch(create(spot));\n    return spot;\n  }\n  return response;\n};\nexport const getOneSpot = id => async dispatch => {\n  const response = await csrfFetch(`/api/spots/${id}`);\n  if (response.ok) {\n    const spot = await response.json();\n    dispatch(getOne(spot));\n    return spot;\n  }\n  return response;\n};\nexport const deleteSpot = id => async dispatch => {\n  const response = await csrfFetch(`/api/spots/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  if (response.ok) {\n    const {\n      message\n    } = await response.json();\n    dispatch(remove(id));\n    return message;\n  }\n  return response;\n};\nconst intialState = {\n  allSpots: {},\n  singleSpot: {}\n};\nconst spotReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : intialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState;\n  switch (action.type) {\n    case LOAD:\n      {\n        newState = {\n          ...state,\n          singleSpot: {}\n        };\n        let spots2 = {};\n        action.spots.forEach(spot => {\n          spots2[spot.id] = spot;\n        });\n        newState.allSpots = spots2;\n        return newState;\n      }\n    case CREATE:\n      {\n        newState = {\n          ...state\n        };\n        let spot2 = {\n          ...state.allSpots\n        };\n        spot2[action.spot.id] = action.spot;\n        newState.allSpots = spot2;\n        return newState;\n      }\n    case CREATE_IMG:\n      {\n        newState = {\n          ...state,\n          singleSpot: {\n            ...state.singleSpot\n          }\n        };\n        let images = [];\n        if (newState.singleSpot.SpotImages.length) {\n          newState.singleSpot.SpotImages.forEach(image => {\n            images.push(image);\n          });\n        }\n        images.push(action.image);\n        newState.singleSpot.SpotImages = images;\n        return newState;\n      }\n    case GET_ONE:\n      {\n        newState = {\n          ...state,\n          singleSpot: {}\n        };\n        let singleSpot2 = action.spot;\n        newState.singleSpot = singleSpot2;\n        return newState;\n      }\n    case DELETE:\n      {\n        newState = {\n          ...state\n        };\n        delete newState[action.spotId];\n        return newState;\n      }\n    default:\n      return state;\n  }\n};\nexport default spotReducer;","map":{"version":3,"names":["csrfFetch","LOAD","CREATE","DELETE","GET_ONE","CREATE_IMG","load","spots","type","create","spot","createImage","image","getOne","remove","spotId","getSpots","dispatch","response","ok","Spots","json","postSpot","payload","console","log","spotPayload","spotResponse","method","headers","body","JSON","stringify","then","e","imagePayload","imageResponse","id","previewImage","url","putSpot","getOneSpot","deleteSpot","message","intialState","allSpots","singleSpot","spotReducer","state","action","newState","spots2","forEach","spot2","images","SpotImages","length","push","singleSpot2"],"sources":["/home/marc/exercise/projects/airbnb/frontend/src/store/spotReducer.js"],"sourcesContent":["import { csrfFetch } from \"./csrf\"\n\nconst LOAD = 'spots/LOAD'\nconst CREATE = 'spots/CREATE'\nconst DELETE = 'spots/DELETE'\nconst GET_ONE = 'spots/GET_ONE'\nconst CREATE_IMG = 'spots/image/CREATE'\n\nconst load = spots => ({\n    type: LOAD,\n    spots\n})\n\nconst create = spot => ({\n    type: CREATE,\n    spot\n})\n\nconst createImage = image => ({\n    type: CREATE,\n    image\n})\n\nconst getOne = spot => ({\n    type: GET_ONE,\n    spot\n})\n\nconst remove = spotId => ({\n    type: DELETE,\n    spotId\n})\n\n\n\nexport const getSpots = () => async dispatch =>{\n    const response = await csrfFetch('/api/spots');\n\n    if (response.ok){\n        const {Spots} = await response.json();\n        dispatch(load(Spots))\n        return Spots\n    }\n    return response\n}\n\nexport const postSpot = (payload) => async dispatch => {\n    console.log('hello from postSpot')\n    let spot;\n    const {spotPayload} = payload\n    console.log('spotPayload: ', spotPayload)\n    const spotResponse = await csrfFetch('/api/spots', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(spotPayload)\n    }).then(\n        async (e)=>{\n            return await e.json()\n        }\n    )\n\n    spot = await spotResponse.json();\n    if(spotResponse.ok){\n         console.log('spot: ',spot)\n        const {imagePayload} = payload\n        console.log('imagePayload: ', imagePayload)\n        const imageResponse = await csrfFetch(`/api/spots/${spot.id}/images`, {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(imagePayload)\n        })\n        const image = await imageResponse.json();\n        console.log('imageResponse: ', image)\n        if(imageResponse.ok){\n            console.log('image: ', image)\n        spot.previewImage = image.url\n        await dispatch(create(spot))\n    }\n}\n    console.log('thunk spot final form: ', spot)\n    return spotResponse\n}\n\n\n\nexport const putSpot = (payload) => async dispatch => {\n    console.log('payload: ', payload)\n    const response = await csrfFetch(`/api/spots/${payload.id}`,{\n        method: 'PUT',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n    });\n\n    if(response.ok) {\n        const spot = await response.json();\n        dispatch(create(spot))\n        return spot\n    }\n    return response\n}\n\nexport const getOneSpot = (id) => async dispatch => {\n    const response= await csrfFetch(`/api/spots/${id}`);\n    if (response.ok){\n        const spot = await response.json();\n        dispatch(getOne(spot))\n        return spot\n    }\n    return response\n}\n\nexport const deleteSpot = (id) => async dispatch => {\n    const response = await csrfFetch(`/api/spots/${id}`, {\n        method: 'DELETE',\n        headers: {'Content-Type': 'application/json'}\n    })\n    if(response.ok){\n        const {message} = await response.json()\n        dispatch(remove(id))\n        return message\n    }\n    return response\n}\n\nconst intialState = {allSpots:{}, singleSpot: {}}\n\nconst spotReducer = (state = intialState, action) => {\n    let newState;\n    switch (action.type) {\n        case LOAD:{\n            newState = {...state, singleSpot: {}}\n            let spots2 = {}\n\n            action.spots.forEach(spot => {\n                spots2[spot.id] = spot\n            })\n            newState.allSpots = spots2\n            return newState\n        }\n        case CREATE:{\n            newState = {...state}\n            let spot2 = {...state.allSpots}\n            spot2[action.spot.id] = action.spot\n            newState.allSpots = spot2\n            return newState\n        }\n        case CREATE_IMG: {\n            newState = {...state, singleSpot:{...state.singleSpot}}\n            let images = []\n            if(newState.singleSpot.SpotImages.length){\n                newState.singleSpot.SpotImages.forEach((image)=>{\n                    images.push(image)\n                })\n            }\n            images.push(action.image)\n            newState.singleSpot.SpotImages = images\n            return newState\n        }\n        case GET_ONE: {\n            newState = {...state, singleSpot: {}}\n            let singleSpot2 = action.spot\n            newState.singleSpot = singleSpot2\n            return newState\n        }\n        case DELETE: {\n            newState = {...state}\n            delete newState[action.spotId]\n            return newState\n        }\n            default:\n                return state\n    }\n}\n\nexport default spotReducer\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}