{"ast":null,"code":"import _slicedToArray from\"/home/marc/exercise/projects/airbnb/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useRef,useState,useContext}from'react';import ReactDOM from'react-dom';import'./Modal.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ModalContext=/*#__PURE__*/React.createContext();export function ModalProvider(_ref){var children=_ref.children;var modalRef=useRef();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),modalContent=_useState2[0],setModalContent=_useState2[1];// callback function that will be called when modal is closing\nvar _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),onModalClose=_useState4[0],setOnModalClose=_useState4[1];var closeModal=function closeModal(){setModalContent(null);// clear the modal contents\n// If callback function is truthy, call the callback function and reset it\n// to null:\nif(typeof onModalClose==='function'){setOnModalClose(null);onModalClose();}};var contextValue={modalRef:modalRef,// reference to modal div\nmodalContent:modalContent,// React component to render inside modal\nsetModalContent:setModalContent,// function to set the React component to render inside modal\nsetOnModalClose:setOnModalClose,// function to set the callback function called when modal is closing\ncloseModal:closeModal// function to close the modal\n};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(ModalContext.Provider,{value:contextValue,children:children}),/*#__PURE__*/_jsx(\"div\",{ref:modalRef})]});}export function Modal(){var _useContext=useContext(ModalContext),modalRef=_useContext.modalRef,modalContent=_useContext.modalContent,closeModal=_useContext.closeModal;// If there is no div referenced by the modalRef or modalContent is not a\n// truthy value, render nothing:\nif(!modalRef||!modalRef.current||!modalContent)return null;// Render the following component to the div referenced by the modalRef\nreturn/*#__PURE__*/ReactDOM.createPortal(/*#__PURE__*/_jsxs(\"div\",{id:\"modal\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"modal-background\",onClick:closeModal}),/*#__PURE__*/_jsx(\"div\",{id:\"modal-content\",children:modalContent})]}),modalRef.current);}export var useModal=function useModal(){return useContext(ModalContext);};","map":{"version":3,"names":["React","useRef","useState","useContext","ReactDOM","ModalContext","createContext","ModalProvider","children","modalRef","modalContent","setModalContent","onModalClose","setOnModalClose","closeModal","contextValue","Modal","current","createPortal","useModal"],"sources":["/home/marc/exercise/projects/airbnb/frontend/src/context/Modal.js"],"sourcesContent":["import React, { useRef, useState, useContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nconst ModalContext = React.createContext();\n\nexport function ModalProvider({ children }) {\n  const modalRef = useRef();\n  const [modalContent, setModalContent] = useState(null);\n  // callback function that will be called when modal is closing\n  const [onModalClose, setOnModalClose] = useState(null);\n\n  const closeModal = () => {\n    setModalContent(null); // clear the modal contents\n    // If callback function is truthy, call the callback function and reset it\n    // to null:\n    if (typeof onModalClose === 'function') {\n      setOnModalClose(null);\n      onModalClose();\n    }\n  };\n\n  const contextValue = {\n    modalRef, // reference to modal div\n    modalContent, // React component to render inside modal\n    setModalContent, // function to set the React component to render inside modal\n    setOnModalClose, // function to set the callback function called when modal is closing\n    closeModal // function to close the modal\n  };\n\n  return (\n    <>\n      <ModalContext.Provider value={contextValue}>\n        {children}\n      </ModalContext.Provider>\n      <div ref={modalRef} />\n    </>\n  );\n}\n\nexport function Modal() {\n  const { modalRef, modalContent, closeModal } = useContext(ModalContext);\n  // If there is no div referenced by the modalRef or modalContent is not a\n  // truthy value, render nothing:\n  if (!modalRef || !modalRef.current || !modalContent) return null;\n\n  // Render the following component to the div referenced by the modalRef\n  return ReactDOM.createPortal(\n    <div id=\"modal\">\n      <div id=\"modal-background\" onClick={closeModal} />\n      <div id=\"modal-content\">\n        {modalContent}\n      </div>\n    </div>,\n    modalRef.current\n  );\n}\n\nexport const useModal = () => useContext(ModalContext);\n"],"mappings":"kIAAA,MAAOA,MAAK,EAAIC,MAAM,CAAEC,QAAQ,CAAEC,UAAU,KAAQ,OAAO,CAC3D,MAAOC,SAAQ,KAAM,WAAW,CAChC,MAAO,aAAa,CAAC,6IAErB,GAAMC,aAAY,cAAGL,KAAK,CAACM,aAAa,EAAE,CAE1C,MAAO,SAASC,cAAa,MAAe,IAAZC,SAAQ,MAARA,QAAQ,CACtC,GAAMC,SAAQ,CAAGR,MAAM,EAAE,CACzB,cAAwCC,QAAQ,CAAC,IAAI,CAAC,wCAA/CQ,YAAY,eAAEC,eAAe,eACpC;AACA,eAAwCT,QAAQ,CAAC,IAAI,CAAC,yCAA/CU,YAAY,eAAEC,eAAe,eAEpC,GAAMC,WAAU,CAAG,QAAbA,WAAU,EAAS,CACvBH,eAAe,CAAC,IAAI,CAAC,CAAE;AACvB;AACA;AACA,GAAI,MAAOC,aAAY,GAAK,UAAU,CAAE,CACtCC,eAAe,CAAC,IAAI,CAAC,CACrBD,YAAY,EAAE,CAChB,CACF,CAAC,CAED,GAAMG,aAAY,CAAG,CACnBN,QAAQ,CAARA,QAAQ,CAAE;AACVC,YAAY,CAAZA,YAAY,CAAE;AACdC,eAAe,CAAfA,eAAe,CAAE;AACjBE,eAAe,CAAfA,eAAe,CAAE;AACjBC,UAAU,CAAVA,UAAW;AACb,CAAC,CAED,mBACE,wCACE,KAAC,YAAY,CAAC,QAAQ,EAAC,KAAK,CAAEC,YAAa,UACxCP,QAAQ,EACa,cACxB,YAAK,GAAG,CAAEC,QAAS,EAAG,GACrB,CAEP,CAEA,MAAO,SAASO,MAAK,EAAG,CACtB,gBAA+Cb,UAAU,CAACE,YAAY,CAAC,CAA/DI,QAAQ,aAARA,QAAQ,CAAEC,YAAY,aAAZA,YAAY,CAAEI,UAAU,aAAVA,UAAU,CAC1C;AACA;AACA,GAAI,CAACL,QAAQ,EAAI,CAACA,QAAQ,CAACQ,OAAO,EAAI,CAACP,YAAY,CAAE,MAAO,KAAI,CAEhE;AACA,mBAAON,QAAQ,CAACc,YAAY,cAC1B,aAAK,EAAE,CAAC,OAAO,wBACb,YAAK,EAAE,CAAC,kBAAkB,CAAC,OAAO,CAAEJ,UAAW,EAAG,cAClD,YAAK,EAAE,CAAC,eAAe,UACpBJ,YAAY,EACT,GACF,CACND,QAAQ,CAACQ,OAAO,CACjB,CACH,CAEA,MAAO,IAAME,SAAQ,CAAG,QAAXA,SAAQ,SAAShB,WAAU,CAACE,YAAY,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}