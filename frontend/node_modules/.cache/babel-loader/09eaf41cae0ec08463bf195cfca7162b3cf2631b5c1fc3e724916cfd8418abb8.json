{"ast":null,"code":"import { csrfFetch } from './csrf';\nconst SET_USER = 'session/setUser';\nconst REMOVE_USER = 'session/removeUser';\nconst setUser = user => {\n  return {\n    type: SET_USER,\n    payload: user\n  };\n};\nconst removeUser = () => {\n  return {\n    type: REMOVE_USER\n  };\n};\nexport const login = user => async dispatch => {\n  const {\n    credential,\n    password\n  } = user;\n  const response = await csrfFetch('/api/session', {\n    method: 'POST',\n    body: JSON.stringify({\n      credential,\n      password\n    })\n  });\n  const data = await response.json();\n  dispatch(setUser(data.user));\n  return response;\n};\nconst initialState = {\n  user: null\n};\nconst sessionReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState;\n  switch (action.type) {\n    case SET_USER:\n      newState = Object.assign({}, state);\n      newState.user = action.payload;\n      return newState;\n    case REMOVE_USER:\n      newState = Object.assign({}, state);\n      newState.user = null;\n      return newState;\n    default:\n      return state;\n  }\n};\nexport const restoreUser = () => async dispatch => {\n  const response = await csrfFetch('/api/session');\n  const data = await response.json();\n  dispatch(setUser(data.user));\n  return response;\n};\nexport const signup = user => async dispatch => {\n  const {\n    username,\n    firstName,\n    lastName,\n    email,\n    password\n  } = user;\n  const response = await csrfFetch(\"/api/users\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      username,\n      firstName,\n      lastName,\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n  dispatch(setUser(data.user));\n  return response;\n};\nexport default sessionReducer;","map":{"version":3,"names":["csrfFetch","SET_USER","REMOVE_USER","setUser","user","type","payload","removeUser","login","dispatch","credential","password","response","method","body","JSON","stringify","data","json","initialState","sessionReducer","state","action","newState","Object","assign","restoreUser","signup","username","firstName","lastName","email"],"sources":["/home/marc/exercise/projects/airbnb/frontend/src/store/session.js"],"sourcesContent":["import { csrfFetch } from './csrf';\n\nconst SET_USER = 'session/setUser';\nconst REMOVE_USER = 'session/removeUser';\n\nconst setUser = (user) => {\n  return {\n    type: SET_USER,\n    payload: user,\n  };\n};\n\nconst removeUser = () => {\n  return {\n    type: REMOVE_USER,\n  };\n};\n\nexport const login = (user) => async (dispatch) => {\n  const { credential, password } = user;\n  const response = await csrfFetch('/api/session', {\n    method: 'POST',\n    body: JSON.stringify({\n      credential,\n      password,\n    }),\n  });\n  const data = await response.json();\n  dispatch(setUser(data.user));\n  return response;\n};\n\nconst initialState = { user: null };\n\nconst sessionReducer = (state = initialState, action) => {\n  let newState;\n  switch (action.type) {\n    case SET_USER:\n      newState = Object.assign({}, state);\n      newState.user = action.payload;\n      return newState;\n    case REMOVE_USER:\n      newState = Object.assign({}, state);\n      newState.user = null;\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport const restoreUser = () => async dispatch => {\n    const response = await csrfFetch('/api/session');\n    const data = await response.json();\n    dispatch(setUser(data.user));\n    return response;\n  };\n\nexport const signup = (user) => async (dispatch) => {\n    const { username, firstName, lastName, email, password } = user;\n    const response = await csrfFetch(\"/api/users\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        username,\n        firstName,\n        lastName,\n        email,\n        password,\n      }),\n    });\n    const data = await response.json();\n    dispatch(setUser(data.user));\n    return response;\n  };\n\nexport default sessionReducer;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,QAAQ;AAElC,MAAMC,QAAQ,GAAG,iBAAiB;AAClC,MAAMC,WAAW,GAAG,oBAAoB;AAExC,MAAMC,OAAO,GAAIC,IAAI,IAAK;EACxB,OAAO;IACLC,IAAI,EAAEJ,QAAQ;IACdK,OAAO,EAAEF;EACX,CAAC;AACH,CAAC;AAED,MAAMG,UAAU,GAAG,MAAM;EACvB,OAAO;IACLF,IAAI,EAAEH;EACR,CAAC;AACH,CAAC;AAED,OAAO,MAAMM,KAAK,GAAIJ,IAAI,IAAK,MAAOK,QAAQ,IAAK;EACjD,MAAM;IAAEC,UAAU;IAAEC;EAAS,CAAC,GAAGP,IAAI;EACrC,MAAMQ,QAAQ,GAAG,MAAMZ,SAAS,CAAC,cAAc,EAAE;IAC/Ca,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBN,UAAU;MACVC;IACF,CAAC;EACH,CAAC,CAAC;EACF,MAAMM,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;EAClCT,QAAQ,CAACN,OAAO,CAACc,IAAI,CAACb,IAAI,CAAC,CAAC;EAC5B,OAAOQ,QAAQ;AACjB,CAAC;AAED,MAAMO,YAAY,GAAG;EAAEf,IAAI,EAAE;AAAK,CAAC;AAEnC,MAAMgB,cAAc,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGF,YAAY;EAAA,IAAEG,MAAM;EAClD,IAAIC,QAAQ;EACZ,QAAQD,MAAM,CAACjB,IAAI;IACjB,KAAKJ,QAAQ;MACXsB,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,KAAK,CAAC;MACnCE,QAAQ,CAACnB,IAAI,GAAGkB,MAAM,CAAChB,OAAO;MAC9B,OAAOiB,QAAQ;IACjB,KAAKrB,WAAW;MACdqB,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,KAAK,CAAC;MACnCE,QAAQ,CAACnB,IAAI,GAAG,IAAI;MACpB,OAAOmB,QAAQ;IACjB;MACE,OAAOF,KAAK;EAAC;AAEnB,CAAC;AAED,OAAO,MAAMK,WAAW,GAAG,MAAM,MAAMjB,QAAQ,IAAI;EAC/C,MAAMG,QAAQ,GAAG,MAAMZ,SAAS,CAAC,cAAc,CAAC;EAChD,MAAMiB,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;EAClCT,QAAQ,CAACN,OAAO,CAACc,IAAI,CAACb,IAAI,CAAC,CAAC;EAC5B,OAAOQ,QAAQ;AACjB,CAAC;AAEH,OAAO,MAAMe,MAAM,GAAIvB,IAAI,IAAK,MAAOK,QAAQ,IAAK;EAChD,MAAM;IAAEmB,QAAQ;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,KAAK;IAAEpB;EAAS,CAAC,GAAGP,IAAI;EAC/D,MAAMQ,QAAQ,GAAG,MAAMZ,SAAS,CAAC,YAAY,EAAE;IAC7Ca,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBY,QAAQ;MACRC,SAAS;MACTC,QAAQ;MACRC,KAAK;MACLpB;IACF,CAAC;EACH,CAAC,CAAC;EACF,MAAMM,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;EAClCT,QAAQ,CAACN,OAAO,CAACc,IAAI,CAACb,IAAI,CAAC,CAAC;EAC5B,OAAOQ,QAAQ;AACjB,CAAC;AAEH,eAAeQ,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}