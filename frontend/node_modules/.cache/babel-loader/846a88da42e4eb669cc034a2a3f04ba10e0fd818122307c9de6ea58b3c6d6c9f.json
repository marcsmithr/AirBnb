{"ast":null,"code":"import { csrfFetch } from \"./csrf\";\nconst LOAD = 'spots/LOAD';\nconst CREATE = 'spots/CREATE';\nconst DELETE = 'spots/DELETE';\nconst GET_ONE = 'spots/GET_ONE';\nconst CREATE_IMG = 'spots/image/CREATE';\nconst load = spots => ({\n  type: LOAD,\n  spots\n});\nconst create = spot => ({\n  type: CREATE,\n  spot\n});\nconst createImage = image => ({\n  type: CREATE,\n  image\n});\nconst getOne = spot => ({\n  type: GET_ONE,\n  spot\n});\nconst remove = spotId => ({\n  type: DELETE,\n  spotId\n});\nexport const getSpots = () => async dispatch => {\n  const response = await csrfFetch('/api/spots');\n  if (response.ok) {\n    const {\n      Spots\n    } = await response.json();\n    dispatch(load(Spots));\n    return Spots;\n  }\n  return response;\n};\nexport const postSpot = payload => async dispatch => {\n  let spot;\n  const {\n    spotPayload\n  } = payload;\n  const spotResponse = await csrfFetch('/api/spots', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(spotPayload)\n  });\n  if (spotResponse.ok) {\n    spot = await spotResponse.json();\n    console.log('spot: ', spot);\n    const {\n      imagePayload\n    } = payload;\n    const imageResponse = await csrfFetch(`/api/spots/${spot.id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(imagePayload)\n    });\n    if (imageResponse.ok) {\n      console.log();\n      const image = await imageResponse.json();\n      spot.previewImage = image.url;\n      await dispatch(create(spot));\n    }\n  }\n  return spot;\n};\nexport const putSpot = payload => async dispatch => {\n  console.log('payload: ', payload);\n  const response = await csrfFetch(`/api/spots/${payload.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  });\n  if (response.ok) {\n    const spot = await response.json();\n    dispatch(create(spot));\n    return spot;\n  }\n  return response;\n};\nexport const getOneSpot = id => async dispatch => {\n  const response = await csrfFetch(`/api/spots/${id}`);\n  if (response.ok) {\n    const spot = await response.json();\n    dispatch(getOne(spot));\n    return spot;\n  }\n  return response;\n};\nexport const deleteSpot = id => async dispatch => {\n  const response = await csrfFetch(`/api/spots/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  if (response.ok) {\n    const {\n      message\n    } = await response.json();\n    dispatch(remove(id));\n    return message;\n  }\n  return response;\n};\nconst intialState = {\n  allSpots: {},\n  singleSpot: {}\n};\nconst spotReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : intialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState;\n  switch (action.type) {\n    case LOAD:\n      {\n        newState = {\n          ...state,\n          singleSpot: {}\n        };\n        let spots2 = {};\n        action.spots.forEach(spot => {\n          spots2[spot.id] = spot;\n        });\n        newState.allSpots = spots2;\n        return newState;\n      }\n    case CREATE:\n      {\n        newState = {\n          ...state\n        };\n        let spot2 = {\n          ...state.allSpots\n        };\n        spot2[action.spot.id] = action.spot;\n        newState.allSpots = spot2;\n        return newState;\n      }\n    case CREATE_IMG:\n      {\n        newState = {\n          ...state,\n          singleSpot: {\n            ...state.singleSpot\n          }\n        };\n        let images = [];\n        if (newState.singleSpot.SpotImages.length) {\n          newState.singleSpot.SpotImages.forEach(image => {\n            images.push(image);\n          });\n        }\n        images.push(action.image);\n        newState.singleSpot.SpotImages = images;\n        return newState;\n      }\n    case GET_ONE:\n      {\n        newState = {\n          ...state,\n          singleSpot: {}\n        };\n        let singleSpot2 = action.spot;\n        newState.singleSpot = singleSpot2;\n        return newState;\n      }\n    case DELETE:\n      {\n        newState = {\n          ...state\n        };\n        delete newState[action.spotId];\n        return newState;\n      }\n    default:\n      return state;\n  }\n};\nexport default spotReducer;","map":{"version":3,"names":["csrfFetch","LOAD","CREATE","DELETE","GET_ONE","CREATE_IMG","load","spots","type","create","spot","createImage","image","getOne","remove","spotId","getSpots","dispatch","response","ok","Spots","json","postSpot","payload","spotPayload","spotResponse","method","headers","body","JSON","stringify","console","log","imagePayload","imageResponse","id","previewImage","url","putSpot","getOneSpot","deleteSpot","message","intialState","allSpots","singleSpot","spotReducer","state","action","newState","spots2","forEach","spot2","images","SpotImages","length","push","singleSpot2"],"sources":["/home/marc/exercise/projects/airbnb/frontend/src/store/spotReducer.js"],"sourcesContent":["import { csrfFetch } from \"./csrf\"\n\nconst LOAD = 'spots/LOAD'\nconst CREATE = 'spots/CREATE'\nconst DELETE = 'spots/DELETE'\nconst GET_ONE = 'spots/GET_ONE'\nconst CREATE_IMG = 'spots/image/CREATE'\n\nconst load = spots => ({\n    type: LOAD,\n    spots\n})\n\nconst create = spot => ({\n    type: CREATE,\n    spot\n})\n\nconst createImage = image => ({\n    type: CREATE,\n    image\n})\n\nconst getOne = spot => ({\n    type: GET_ONE,\n    spot\n})\n\nconst remove = spotId => ({\n    type: DELETE,\n    spotId\n})\n\n\n\nexport const getSpots = () => async dispatch =>{\n    const response = await csrfFetch('/api/spots');\n\n    if (response.ok){\n        const {Spots} = await response.json();\n        dispatch(load(Spots))\n        return Spots\n    }\n    return response\n}\n\nexport const postSpot = (payload) => async dispatch => {\n    let spot;\n    const {spotPayload} = payload\n    const spotResponse = await csrfFetch('/api/spots', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(spotPayload)\n    });\n    if(spotResponse.ok){\n         spot = await spotResponse.json();\n         console.log('spot: ',spot)\n        const {imagePayload} = payload\n        const imageResponse = await csrfFetch(`/api/spots/${spot.id}`, {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(imagePayload)\n        })\n        if(imageResponse.ok){\n            console.log()\n            const image = await imageResponse.json();\n        spot.previewImage = image.url\n        await dispatch(create(spot))\n        }\n    }\n    return spot\n}\n\n\n\nexport const putSpot = (payload) => async dispatch => {\n    console.log('payload: ', payload)\n    const response = await csrfFetch(`/api/spots/${payload.id}`,{\n        method: 'PUT',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n    });\n\n    if(response.ok) {\n        const spot = await response.json();\n        dispatch(create(spot))\n        return spot\n    }\n    return response\n}\n\nexport const getOneSpot = (id) => async dispatch => {\n    const response= await csrfFetch(`/api/spots/${id}`);\n    if (response.ok){\n        const spot = await response.json();\n        dispatch(getOne(spot))\n        return spot\n    }\n    return response\n}\n\nexport const deleteSpot = (id) => async dispatch => {\n    const response = await csrfFetch(`/api/spots/${id}`, {\n        method: 'DELETE',\n        headers: {'Content-Type': 'application/json'}\n    })\n    if(response.ok){\n        const {message} = await response.json()\n        dispatch(remove(id))\n        return message\n    }\n    return response\n}\n\nconst intialState = {allSpots:{}, singleSpot: {}}\n\nconst spotReducer = (state = intialState, action) => {\n    let newState;\n    switch (action.type) {\n        case LOAD:{\n            newState = {...state, singleSpot: {}}\n            let spots2 = {}\n\n            action.spots.forEach(spot => {\n                spots2[spot.id] = spot\n            })\n            newState.allSpots = spots2\n            return newState\n        }\n        case CREATE:{\n            newState = {...state}\n            let spot2 = {...state.allSpots}\n            spot2[action.spot.id] = action.spot\n            newState.allSpots = spot2\n            return newState\n        }\n        case CREATE_IMG: {\n            newState = {...state, singleSpot:{...state.singleSpot}}\n            let images = []\n            if(newState.singleSpot.SpotImages.length){\n                newState.singleSpot.SpotImages.forEach((image)=>{\n                    images.push(image)\n                })\n            }\n            images.push(action.image)\n            newState.singleSpot.SpotImages = images\n            return newState\n        }\n        case GET_ONE: {\n            newState = {...state, singleSpot: {}}\n            let singleSpot2 = action.spot\n            newState.singleSpot = singleSpot2\n            return newState\n        }\n        case DELETE: {\n            newState = {...state}\n            delete newState[action.spotId]\n            return newState\n        }\n            default:\n                return state\n    }\n}\n\nexport default spotReducer\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}